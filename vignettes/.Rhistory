# d <- normalize.quantiles(d)
# dimnames(d) <- dn
d <- d[complete.cases(d),]
#PCA
pr <- prcomp(t(d),scale=T)$x
p1 <- ggplot(data.frame(PC1=pr[,1],PC2=pr[,2],Group=type),aes(x=PC1,y=PC2,col=Group)) + geom_point() + theme_classic() + scale_color_manual(values=brewer.pal(length(unique(type)),'Set1')) + theme(legend.title = element_blank(),legend.position = 'right')
#p2 <- ggplot(data.frame(PC1=pr[,1],PC3=pr[,3],Group=type),aes(x=PC1,y=PC3,col=Group)) + geom_point() + theme_classic() + scale_color_manual(values=brewer.pal(length(unique(type)),'Set1'))
#p3 <- ggplot(data.frame(PC2=pr[,2],PC3=pr[,3],Group=type),aes(x=PC2,y=PC3,col=Group)) + geom_point() + theme_classic() + scale_color_manual(values=brewer.pal(length(unique(type)),'Set1'))
pdf(paste0('Dropbox/ming/metabo/plot/',ds,'_pca.pdf'),width=5,height=4)
plot(p1)
dev.off()
pdf(paste0('Dropbox/ming/metabo/plot/',ds,'_heatmap.pdf'),width=5,height=12)
pheatmap(d,cluster_cols = F,scale = 'row')
dev.off()
}
library(ggplot2)
library(RColorBrewer)
library(preprocessCore)
library(gridExtra)
library(patchwork)
library(pheatmap)
for (ds in c('Loh','Zhang')) {
d <- read.csv(paste0('Dropbox/ming/metabo/data/',ds,'.csv'),as.is=T,row.names=1,skip=1,na.strings = 'N/A')
d <- as.matrix(d)
type <- as.matrix(read.csv(paste0('Dropbox/ming/metabo/data/',ds,'.csv'),as.is=T,row.names=1,nrows=1,na.strings = 'N/A'))[1,]
d <- log2(d+1)
# dn <- dimnames(d)
# d <- normalize.quantiles(d)
# dimnames(d) <- dn
d <- d[complete.cases(d),]
#PCA
pr <- prcomp(t(d),scale=T)$x
p1 <- ggplot(data.frame(PC1=pr[,1],PC2=pr[,2],Group=type),aes(x=PC1,y=PC2,col=Group)) + geom_point() + theme_classic() + scale_color_manual(values=brewer.pal(length(unique(type)),'Set1')) + theme(legend.title = element_blank(),legend.position = 'right')
#p2 <- ggplot(data.frame(PC1=pr[,1],PC3=pr[,3],Group=type),aes(x=PC1,y=PC3,col=Group)) + geom_point() + theme_classic() + scale_color_manual(values=brewer.pal(length(unique(type)),'Set1'))
#p3 <- ggplot(data.frame(PC2=pr[,2],PC3=pr[,3],Group=type),aes(x=PC2,y=PC3,col=Group)) + geom_point() + theme_classic() + scale_color_manual(values=brewer.pal(length(unique(type)),'Set1'))
pdf(paste0('Dropbox/ming/metabo/plot/',ds,'_pca.pdf'),width=5,height=4)
plot(p1)
dev.off()
pdf(paste0('Dropbox/ming/metabo/plot/',ds,'_heatmap.pdf'),width=5,height=12)
plot(pheatmap(d,cluster_cols = F,scale = 'row'))
dev.off()
}
pheatmap(d,cluster_cols = F,scale = 'row')
dim(d)
pheatmap(d,cluster_cols = F,scale = 'row')
plot(1)
rm(list=ls())
library(Seurat)
library(limma)
d <- readRDS('/Users/zhichengji/Dropbox/kamran/data/seurat.rds')
tab <- table(sub(':.*','',colnames(d)))
pd <- data.frame(Sample=names(tab),Number=as.vector(tab))
pdf('/Users/zhichengji/Dropbox/kamran/plot/numcell.pdf',width=6,height=4)
ggplot(pd,aes(x=Sample,y=Number)) + geom_bar(stat='identity') + theme_classic() + coord_flip() + xlab('')
dev.off()
pdf('/Users/zhichengji/Dropbox/kamran/plot/cluster.pdf',width=6,height=6)
DimPlot(d,label = T) + theme(legend.position = 'none')
dev.off()
d@meta.data$sample <- sub(':.*','',rownames(d@meta.data))
pdf('/Users/zhichengji/Dropbox/kamran/plot/sample.pdf',width=7,height=6)
DimPlot(d,group.by = "sample")
dev.off()
DefaultAssay(d) <- "RNA"
ag <- sapply(c('CD3D','CD4','CD8A','CD14','CD19','NCAM1'),function(i) grep(paste0('^',i,':'),rownames(d$RNA@data),value=T))
png('/Users/zhichengji/Dropbox/kamran/plot/marker.png',width=3000,height=2000,res=300)
FeaturePlot(d, features = ag,ncol = 3,pt.size = 0.1)
dev.off()
clu <- Idents(d)
n <- names(clu)
clu <- as.character(clu)
names(clu) <- n
count <- d$RNA@counts
table(clu)
s=clu[1]
s
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
m <- t(log2(t(m)/colSums(m)*1e6 + 1))
des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m))))
colMeans(m > 0)
dim(clu)
dim(d)
m <- colMeans(d > 0)
dim(d)
str(d)
nzm <- colMeans(d$RNA@counts > 0)
summary(nzm)
head(nzm)
summary(nzm[grep('B:',names(nzm))])
summary(nzm[grep('P:',names(nzm))])
res <- sapply(unique(clu),function(s) {
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
m <- t(log2(t(m)/colSums(m)*1e6 + 1))
des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m))))
#des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m)),individual=sub('B$|P$','',colnames(m))))
topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m))
},simplify = F)
sapply(res,function(i) sum(i$adj.P.Val < 0.05))
sort(sapply(res,function(i) sum(i$adj.P.Val < 0.05)))
s='20'
head(clu)
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
m <- t(log2(t(m)/colSums(m)*1e6 + 1))
des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m))))
des
head(  topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m)))
m['ARL6IP4:ENSG00000182196',]
res=  topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m))
sum(res[,1] < 0)
sum(res[,1] > 0)
colSums(m)
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
colSums(m > 0)
m[,'KM040B']
which(m[,'KM040B'] > 0)
sort(sapply(res,function(i) sum(i$adj.P.Val < 0.05)))
res <- sapply(unique(clu),function(s) {
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
m <- t(log2(t(m)/colSums(m)*1e6 + 1))
des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m))))
#des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m)),individual=sub('B$|P$','',colnames(m))))
topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m))
},simplify = F)
sort(sapply(res,function(i) sum(i$adj.P.Val < 0.05)))
s='13'
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
m <- t(log2(t(m)/colSums(m)*1e6 + 1))
des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m))))
colSums(m > 0)
num <- sapply(unique(clu),function(s) {
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
colSums(m > 0)
})
num
sort(sapply(res,function(i) sum(i$adj.P.Val < 0.05)))
k=colSums(d$RNA@counts > 0)
summary(k)
DefaultAssay(d) <- "RNA"
ag <- sapply(c('CD3D','CD4','CD8A','CD14','CD19','NCAM1'),function(i) grep(paste0('^',i,':'),rownames(d$RNA@data),value=T))
png('/Users/zhichengji/Dropbox/kamran/plot/marker.png',width=3000,height=2000,res=300)
FeaturePlot(d, features = ag,ncol = 3,pt.size = 0.1)
dev.off()
library(parallel)
allf <- list.files('/hpc/group/jilab/zj/mb/simulation/res')
fdr <- function(fdrv,gene) {
diff <- ifelse(grepl(':TRUE',gene),'diff','nodiff')
sumdifffval <- sum(diff=='diff')
perf <- t(sapply(1:length(diff), function(i) {
num <- sum(diff[1:i]=='diff')
c(num/sumdifffval,(i-num)/i,fdrv[i])
}))
if (nrow(perf) > 1) {
for (i in (nrow(perf)):2) {
if (perf[i-1,2] > perf[i,2]) perf[i-1,2] = perf[i,2]
}
}
colnames(perf) <- c('Sensitivity','Real_FDR','Reported_FDR')
cur <- rbind(c(0,0,0),perf)
}
fdrdiff <- function(tmp) {
bound <- approx(x=tmp[,3],y=tmp[,2],xout=0.25)$y
tmp <- rbind(tmp[tmp[,3] < 0.25,2:3],c(bound,0.25))
tmp <- unique(tmp)
diff <- sum(sapply(2:nrow(tmp),function(i) (tmp[i-1,1]+tmp[i,1])*(tmp[i,2]-tmp[i-1,2])/2),na.rm = T)-0.25*0.25/2
}
aucdiff <- function(tmp) {
bound <- approx(x=tmp[,2],y=tmp[,1],xout=0.25)$y
tmp <- rbind(tmp[tmp[,2] < 0.25,1:2],c(bound,0.25))
area <- sum(sapply(2:nrow(tmp),function(i) (tmp[i-1,1]+tmp[i,1])*(tmp[i,2]-tmp[i-1,2])/2),na.rm=T)/0.25
}
sort(sapply(res,function(i) sum(i$adj.P.Val < 0.05)))
num
drs
des
head(m)
#des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m))))
des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m)),individual=sub('B$|P$','',colnames(m))))
topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m))
head(topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m)))
des
rownames(des)=colnames(m)
des
res <- sapply(unique(clu),function(s) {
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
m <- t(log2(t(m)/colSums(m)*1e6 + 1))
#des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m))))
des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m)),individual=sub('B$|P$','',colnames(m))))
topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m))
},simplify = F)
des
for (s in unique(clu)) {
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
m <- t(log2(t(m)/colSums(m)*1e6 + 1))
#des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m))))
des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m)),individual=sub('B$|P$','',colnames(m))))
res <- topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m))
write.csv(res,file=paste0('/Users/zhichengji/Dropbox/kamran/diff/',s,'.csv'))
}
s='6'
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
m <- t(log2(t(m)/colSums(m)*1e6 + 1))
#des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m))))
des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m)),individual=sub('B$|P$','',colnames(m))))
res <- topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m))
head(res)
head(res,10)
head(rowMeans(m[,grep('B',colnames(m))]))
head(rowMeans(m[,grep('B',colnames(m))])[rownames(res)])
res <- data.frame(meanB=rowMeans(m[,grep('B',colnames(m))])[rownames(res)],meanP=rowMeans(m[,grep('P',colnames(m))])[rownames(res)],meanP,res[,c('logFC','adj.P.Val')],stringsAsFactors = F)
res <- data.frame(meanB=rowMeans(m[,grep('B',colnames(m))])[rownames(res)],meanP=rowMeans(m[,grep('P',colnames(m))])[rownames(res)],res[,c('logFC','adj.P.Val')],stringsAsFactors = F)
head(res)
des
res <- topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m))
res <- data.frame(meanP=rowMeans(m[,grep('P',colnames(m))])[rownames(res)],meanB=rowMeans(m[,grep('B',colnames(m))])[rownames(res)],res[,c('logFC','adj.P.Val')],stringsAsFactors = F)
head(res)
head(res,10)
heatmap(m[rownames(res)[res$adj.P.Val < 0.05],])
heatmap(m[rownames(res)[res$adj.P.Val < 0.05],],scale = 'row')
library(pheatmap)
pheatmap(m[rownames(res)[res$adj.P.Val < 0.05],],scale = 'row')
pdf(paste0('/Users/zhichengji/Dropbox/kamran/diff/heatmap/',s,'.pdf'))
pheatmap(m[rownames(res)[res$adj.P.Val < 0.05],],scale = 'row')
dev.off()
dev.off()
nzm <- colMeans(d$RNA@counts > 0)
library(pheatmap)
for (s in unique(clu)) {
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
m <- t(log2(t(m)/colSums(m)*1e6 + 1))
#des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m))))
des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m)),individual=sub('B$|P$','',colnames(m))))
res <- topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m))
res <- data.frame(meanP=rowMeans(m[,grep('P',colnames(m))])[rownames(res)],meanB=rowMeans(m[,grep('B',colnames(m))])[rownames(res)],res[,c('logFC','adj.P.Val')],stringsAsFactors = F)
write.csv(res,file=paste0('/Users/zhichengji/Dropbox/kamran/diff/list/',s,'.csv'))
pdf(paste0('/Users/zhichengji/Dropbox/kamran/diff/heatmap/',s,'.pdf'))
pheatmap(m[rownames(res)[res$adj.P.Val < 0.05],],scale = 'row')
dev.off()
}
nzm <- colMeans(d$RNA@counts > 0)
library(pheatmap)
for (s in unique(clu)) {
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
m <- t(log2(t(m)/colSums(m)*1e6 + 1))
#des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m))))
des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m)),individual=sub('B$|P$','',colnames(m))))
res <- topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m))
res <- data.frame(meanP=rowMeans(m[,grep('P',colnames(m))])[rownames(res)],meanB=rowMeans(m[,grep('B',colnames(m))])[rownames(res)],res[,c('logFC','adj.P.Val')],stringsAsFactors = F)
write.csv(res,file=paste0('/Users/zhichengji/Dropbox/kamran/diff/list/',s,'.csv'))
pdf(paste0('/Users/zhichengji/Dropbox/kamran/diff/heatmap/',s,'.pdf'))
pheatmap(m[rownames(res)[res$adj.P.Val < 0.05],],scale = 'row')
dev.off()
}
s
rownames(res)[res$adj.P.Val < 0.05]
for (s in unique(clu)) {
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
m <- t(log2(t(m)/colSums(m)*1e6 + 1))
#des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m))))
des <- model.matrix(~.,data.frame(sample=sub('.*[0-9]','',colnames(m)),individual=sub('B$|P$','',colnames(m))))
res <- topTable(eBayes(lmFit(m,design=des)),coef=2,n=nrow(m))
res <- data.frame(meanP=rowMeans(m[,grep('P',colnames(m))])[rownames(res)],meanB=rowMeans(m[,grep('B',colnames(m))])[rownames(res)],res[,c('logFC','adj.P.Val')],stringsAsFactors = F)
write.csv(res,file=paste0('/Users/zhichengji/Dropbox/kamran/diff/list/',s,'.csv'))
if (sum(res$adj.P.Val < 0.05) > 0) {
pdf(paste0('/Users/zhichengji/Dropbox/kamran/diff/heatmap/',s,'.pdf'))
pheatmap(m[rownames(res)[res$adj.P.Val < 0.05],],scale = 'row')
dev.off()
}
}
pb <- sapply(unique(clu),function(s) {
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
m <- m[rowSums(m) > 0,]
t(log2(t(m)/colSums(m)*1e6 + 1))
})
str(pb)
str(pb,ncol)
sapply(pb,ncol)
summary(sapply(pb,ncol)
)
pb <- sapply(unique(clu),function(s) {
m <- t(rowsum(t(as.matrix(count[,clu==s])),sub(':.*','',names(clu)[clu==s])))
t(log2(t(m)/colSums(m)*1e6 + 1))
})
str(pb)
names(pb)
s
m <- pb[[s]]
om <- pb[names(pb)!=s]
dim(om)
str(om)
table(sub(':.*','',names(clu)[clu!=s])))
table(sub(':.*','',names(clu)[clu!=s]))
m <- t(rowsum(t(as.matrix(count[,clu!=s])),sub(':.*','',names(clu)[clu!=s])))
opb <- sapply(unique(clu),function(s) {
m <- t(rowsum(t(as.matrix(count[,clu!=s])),sub(':.*','',names(clu)[clu!=s])))
t(log2(t(m)/colSums(m)*1e6 + 1))
})
dim(count)
min(rowSums(count))
str(count)
m <- rowsum(t(as.matrix(count[,clu!=s])),sub(':.*','',names(clu)[clu!=s]))
rm(list=ls())
library(Seurat)
library(limma)
d <- readRDS('/Users/zhichengji/Dropbox/kamran/data/seurat.rds')
library(Seurat)
library(scubi)
system.file(package = 'scubi')
system.file('inst/data',package = 'scubi')
system.file('inst',package = 'scubi')
data <- readRDS(paste0(system.file(package = 'scubi'),'inst/data/scubiexample.rds'))
data <- readRDS(paste0(system.file(package = 'scubi'),'/inst/data/scubiexample.rds'))
list.files('/Library/Frameworks/R.framework/Versions/4.0/Resources/library/scubi/')
list.files('/Library/Frameworks/R.framework/Versions/4.0/Resources/library/scubidata/')
list.files('/Library/Frameworks/R.framework/Versions/4.0/Resources/library/scubi/data/')
system.file('data',package = 'scubi')
system.file('scubiexample.rds',package = 'scubi')
data <- readRDS(paste0(system.file('data',package = 'scubi'),'/scubiexample.rds'))
data
u1 <- data$umap@cell.embeddings[,1]
data <- readRDS(paste0(system.file('data',package = 'scubi'),'/scubiexample.rds'))
umap1 <- data$umap@cell.embeddings[,1]
umap2 <- data$umap@cell.embeddings[,2]
count <- data$RNA@counts
data$meta.data
head(names(umap1))
head(colnames(count))
sample <- sub(':.*','',colnames(count))
str(umap1)
str(umap2)
dim(count)
table(sample)
count
count[1:3,1:3]
scubi_discrete(dim1=umap1,dim2=umap2,feature = sample)
library(scubi)
scubi_discrete(dim1=umap1,dim2=umap2,feature = sample)
library(scubi)
library(Seurat)
data <- readRDS(paste0(system.file('data',package = 'scubi'),'/scubiexample.rds'))
umap1 <- data$umap@cell.embeddings[,1]
umap2 <- data$umap@cell.embeddings[,2]
count <- data$RNA@counts
sample <- sub(':.*','',colnames(count))
str(umap1)
str(umap2)
count[1:3,1:3]
dim(count)
table(sample)
scubi_discrete(dim1=umap1,dim2=umap2,feature = sample)
library(scubi)
scubi_discrete(dim1=umap1,dim2=umap2,feature = sample)
library(scubi)
library(Seurat)
data <- readRDS(paste0(system.file('data',package = 'scubi'),'/scubiexample.rds'))
umap1 <- data$umap@cell.embeddings[,1]
umap2 <- data$umap@cell.embeddings[,2]
count <- data$RNA@counts
sample <- sub(':.*','',colnames(count))
str(umap1)
str(umap2)
count[1:3,1:3]
dim(count)
table(sample)
scubi_discrete(dim1=umap1,dim2=umap2,feature = sample)
fitted.lm
readcount <- colSums(data)
library(Matrix)
readcount <- colSums(data)
scubi_continuous(dim1=umap1,dim2=umap2,feature = readcount)
scubi_expression(dim1=umap1,dim2=umap2,count=count,gene='CD14')
library(Matrix)
scubi_expression(dim1=umap1,dim2=umap2,count=count,gene='CD14')
dim(count)
'CD14' %in% rownames(count)
scubi_expression
library(Matrix)
scubi_expression(dim1=umap1,dim2=umap2,count=count,gene='CD14')
count
colSums(count)
scubi_expression
dim1=umap1
dim2=umap2
count=count
gene='CD14'
g <- paste0(round(dim1 * factor), "_", round(dim2 * factor))
rc <- rowsum(colSums(count), g)[, 1]
me <- rowsum(count[gene, ], g)[, 1]
factor()
factor=1-
factor=10
g <- paste0(round(dim1 * factor), "_", round(dim2 * factor))
rc <- rowsum(colSums(count), g)[, 1]
me <- rowsum(count[gene, ], g)[, 1]
me <- log2(me/rc * 1e+05 + 1)
center <- cbind(as.numeric(sub("_.*", "", names(me))), as.numeric(sub(".*_",
"", names(me))))
pd <- data.frame(xmin = (center[, 1] - 0.5)/factor, xmax = (center[,
1] + 0.5)/factor, ymin = (center[, 2] - 0.5)/factor,
ymax = (center[, 2] + 0.5)/factor, expression = me)
head(pd)
ggplot() + geom_rect(data = pd, aes(xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax, fill = expression)) + theme_classic() +
scale_fill_gradientn(colors = palette) + theme(legend.position = "bottom",
legend.key.height = unit(0.5, "cm"), legend.margin = margin(t = 0,
unit = "cm"))
palette = rainbow(15)[c(11:1, 15)]
ggplot() + geom_rect(data = pd, aes(xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax, fill = expression)) + theme_classic() +
scale_fill_gradientn(colors = palette) + theme(legend.position = "bottom",
legend.key.height = unit(0.5, "cm"), legend.margin = margin(t = 0,
unit = "cm"))
scubi_expression(dim1=umap1,dim2=umap2,count=count,gene='CD14')
getwd()
setwd('Dropbox/scubi/')
setwd('software/')
roxygen2::roxygenise('scubi/')
roxygen2::roxygenise('scubi/')
roxygen2::roxygenise('scubi/')
scubi_expression(dim1=umap1,dim2=umap2,count=count,gene='CD14')
scubi_discrete(dim1 = umap1, dim2 = umap2, feature = sample)
scubi_multiproportion
sample
unique(sample)
uniquesample <- unique(sample)
design <- data.frame(uniquesample=='HD',row.names = uniquesample)
design
design <- data.frame(type=as.numeric(uniquesample=='HD'),row.names = uniquesample)
scubi_multiproportion(dim1 = umap1, dim2 = umap2, sample = sample, design = design)
scubi_expression(dim1 = umap1, dim2 = umap2, count = count, gene = 'CD14')
scubi_multiproportion(dim1 = umap1, dim2 = umap2, sample = sample, design = design)
scubi_expression(dim1 = umap1, dim2 = umap2, count = count, gene = 'CD3D')
scubi_multiproportion(dim1 = umap1, dim2 = umap2, sample = sample, design = design)
design <- data.frame(type=as.numeric(uniquesample=='Se'),row.names = uniquesample)
scubi_multiproportion(dim1 = umap1, dim2 = umap2, sample = sample, design = design)
scubi_multicontinuous
uniquesample <- unique(sample)
design <- data.frame(type=as.numeric(uniquesample=='Se'),row.names = uniquesample)
scubi_multicontinuous(dim1 = umap1, dim2 = umap2, feature = readcount, sample = sample, design = design)
scubi_multicontinuous(dim1 = umap1, dim2 = umap2, feature = readcount, sample = sample, design = design,factor=3)
scubi_multicontinuous(dim1 = umap1, dim2 = umap2, feature = readcount, sample = sample, design = design,factor=2)
scubi_multicontinuous(dim1 = umap1, dim2 = umap2, feature = readcount, sample = sample, design = design,factor=3)
scubi_multicontinuous(dim1 = umap1, dim2 = umap2, feature = readcount, sample = sample, design = design,factor=3,smooth = F)
scubi_multiexpression
scubi_multiexpression(dim1 = umap1, dim2 = umap2, count = count, gene = 'S100A8', sample = sample, design = design)
scubi_multiexpression(dim1 = umap1, dim2 = umap2, count = count, gene = 'S100A8', sample = sample, design = design,factor=3)
library(scubi)
library(Seurat)
library(Matrix)
data <- readRDS(paste0(system.file('data',package = 'scubi'),'/scubiexample.rds'))
umap1 <- data$umap@cell.embeddings[,1]
umap2 <- data$umap@cell.embeddings[,2]
count <- data$RNA@counts
sample <- sub(':.*','',colnames(count))
readcount <- colSums(data)
str(umap1)
str(umap2)
count[1:3,1:3]
dim(count)
table(sample)
scubi_expression(dim1 = umap1, dim2 = umap2, count = count, gene = 'CD3D')
scubi_continuous(dim1 = umap1, dim2 = umap2, feature = readcount)
scubi_discrete(dim1 = umap1, dim2 = umap2, feature = sample)
uniquesample <- unique(sample)
design <- data.frame(type=as.numeric(uniquesample=='Se'),row.names = uniquesample)
scubi_multiproportion(dim1 = umap1, dim2 = umap2, sample = sample, design = design)
scubi_multiexpression(dim1 = umap1, dim2 = umap2, count = count, gene = 'S100A8', sample = sample, design = design,factor=3)
scubi_multicontinuous(dim1 = umap1, dim2 = umap2, feature = readcount, sample = sample, design = design,factor=3)
sessionInfo()
library(scubi)
library(Seurat)
library(Matrix)
data <- readRDS(paste0(system.file('data',package = 'scubi'),'/scubiexample.rds'))
umap1 <- data$umap@cell.embeddings[,1]
umap2 <- data$umap@cell.embeddings[,2]
count <- data$RNA@counts
sample <- sub(':.*','',colnames(count))
readcount <- colSums(data)
str(umap1)
str(umap2)
count[1:3,1:3]
dim(count)
table(sample)
scubi_expression(dim1 = umap1, dim2 = umap2, count = count, gene = 'CD3D')
scubi_continuous(dim1 = umap1, dim2 = umap2, feature = readcount)
scubi_discrete(dim1 = umap1, dim2 = umap2, feature = sample)
uniquesample <- unique(sample)
design <- data.frame(type=as.numeric(uniquesample=='Se'),row.names = uniquesample)
scubi_multiproportion(dim1 = umap1, dim2 = umap2, sample = sample, design = design)
scubi_multiexpression(dim1 = umap1, dim2 = umap2, count = count, gene = 'S100A8', sample = sample, design = design,factor=3)
scubi_multicontinuous(dim1 = umap1, dim2 = umap2, feature = readcount, sample = sample, design = design,factor=3)
sessionInfo()
devtools::install_github("rmarkdown")
install.packages('knitr')
install.packages("knitr")
library(rmarkdown)
getwd()
setwd('scubi/vignettes/')
Sweave2knitr("SCUBI.Rnw")
library(knitr)
Sweave2knitr("SCUBI.Rnw")
